# -*- coding: utf-8 -*-
"""upper_confidence_bound.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16iQbCHmIUI9u00I8Sp7ooQMAenJU-ej_

# Upper Confidence Bound (UCB)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Ads_CTR_Optimisation.csv')

"""## Implementing UCB"""

import math
N = 10000 # total number of user is 10000 which we show the ads
d = 10 # number of ads we have is 10
ads_selected = [] #list of selected ads over the rounds
numbers_of_selections = [0] * d #inialize list with 10 zeros , Each time if add 1 is selected means the it will incremented by 1 if add 5 is selected means then it will turn 1
sums_of_rewards = [0] * d #inializes as list of 10 zero
total_reward = 0 #total rewards accumulated over the rounds

#to iterate 10000 ads with customers
for n in range(0, N):
    ad = 0
    max_upper_bound = 0
    for i in range(0, d):
        if (numbers_of_selections[i] > 0):#add is selected at least once
            average_reward = sums_of_rewards[i] / numbers_of_selections[i]
            delta_i = math.sqrt(3/2 * math.log(n + 1) / numbers_of_selections[i])
            upper_bound = average_reward + delta_i #upper confidence bound
        else:
            upper_bound = 1e400 #to make select by keeping maximum high value
        if upper_bound > max_upper_bound: #to make select
            max_upper_bound = upper_bound
            ad = i
    ads_selected.append(ad)
    numbers_of_selections[ad] = numbers_of_selections[ad] + 1
    reward = dataset.values[n, ad]
    sums_of_rewards[ad] = sums_of_rewards[ad] + reward
    total_reward = total_reward + reward

"""## Visualising the results"""

plt.hist(ads_selected)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was selected')
plt.show()

